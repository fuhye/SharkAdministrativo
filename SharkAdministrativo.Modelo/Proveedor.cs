//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SharkAdministrativo.Modelo
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Data;
    
    public partial class Proveedor
    {
        public Proveedor()
        {
            this.Presentacion = new HashSet<Presentacion>();
        }
    
        public int id { get; set; }
        public string nombre { get; set; }
        public string razon_social { get; set; }
        public string RFC { get; set; }
        public string calle { get; set; }
        public string NoExterior { get; set; }
        public string codigo_postal { get; set; }
        public string colonia { get; set; }
        public string localidad { get; set; }
        public string municipio { get; set; }
        public string estado { get; set; }
        public string pais { get; set; }
        public string telefono { get; set; }
        public System.DateTime fecha_registro { get; set; }
        public int empresa_id { get; set; }
        public string sucursal { get; set; }
        public string tipos_proveedor { get; set; }
        public string codigo { get; set; }
    
        public virtual ICollection<Presentacion> Presentacion { get; set; }
        public virtual Empresa Empresa { get; set; }

        /// <summary>
        /// Registra un objeto proveedor en la base de datos.
        /// </summary>
        /// <param name="proveedor">El objeto a registrar.</param>
        public void registrar(Proveedor proveedor)
        {
            using (bdsharkEntities db = new bdsharkEntities())
            {
                db.Configuration.LazyLoadingEnabled = true;
                db.Empresas.Attach(proveedor.Empresa);
                db.Proveedores.Add(proveedor);
                db.SaveChanges();
            }
        }

        /// <summary>
        /// Obtiene un objeto proveedor específico.
        /// </summary>
        /// <param name="id">Parámetro de búsqueda.</param>
        /// <returns>El objeto obtenido.</returns>
        public Proveedor obtenerPorID(int id)
        {
            Proveedor proveedor = new Proveedor();
            using (bdsharkEntities db = new bdsharkEntities())
            {
                proveedor = db.Proveedores.Find(id);
            }
            return proveedor;
        }

        /// <summary>
        /// Obtiene todos los registros de objetos proveedor.
        /// </summary>
        /// <returns>La lista obtenida.</returns>
        public List<Proveedor> obtenerTodos()
        {
            List<Proveedor> proveedores = new List<Proveedor>();
            bdsharkEntities db = new bdsharkEntities();

            db.Configuration.LazyLoadingEnabled = true;
            var proveedoresQuery = from proveedor in db.Proveedores select proveedor;
            foreach (var proveedor in proveedoresQuery)
            {
                proveedores.Add(proveedor);
            }

            return proveedores;
        }

        /// <summary>
        /// Elimina un objeto específico en la base de datos.
        /// </summary>
        /// <param name="d_proveedor">El objeto a eliminar.</param>
        public void eliminar(Proveedor d_proveedor)
        {
            using (bdsharkEntities db = new bdsharkEntities())
            {
                var proveedorQuery = from proveedor in db.Proveedores where proveedor.id == d_proveedor.id select proveedor;

                foreach (var proveedor in proveedorQuery)
                {
                    db.Entry(proveedor).State = EntityState.Deleted;
                }
                db.SaveChanges();
            }
        }

        /// <summary>
        /// Obtiene un objeto proveedor específico. 
        /// </summary>
        /// <param name="name">Parámetro de búsqueda.</param>
        /// <returns>El objeto encontrado.</returns>
        public Proveedor obtener(string name)
        {
            Proveedor provee = new Proveedor();
            using (bdsharkEntities db = new bdsharkEntities())
            {




                var proveedoresQuery = from proveedor in db.Proveedores where proveedor.nombre == name select proveedor;
                foreach (var proveedor in proveedoresQuery)
                {
                    provee = proveedor;
                }

            }
            return provee;
        }

        /// <summary>
        /// Obtiene un objeto a través del RFC.
        /// </summary>
        /// <param name="RFC">Parametro de busqueda.</param>
        /// <returns>El objeto encontrado.</returns>
        public Proveedor obtenerPorRFC(string RFC)
        {
            Proveedor p_proveedor = new Proveedor();
            using (bdsharkEntities db = new bdsharkEntities())
            {

                db.Configuration.LazyLoadingEnabled = true;
                var proveedorQuery = from proveedor in db.Proveedores where proveedor.RFC == RFC select proveedor;

                foreach (var proveedor in proveedorQuery)
                {
                    p_proveedor = proveedor;
                }
            }
            return p_proveedor;
        }




        /// <summary>
        /// Valida la existencia del objeto.
        /// </summary>
        /// <param name="param_proveedor">El objeto a buscar.</param>
        /// <returns>Variable string con especificación.</returns>
        public string validar(Proveedor param_proveedor)
        {
            //Variables temporales
            string opcion = "";
            bool result = false;
            using (bdsharkEntities db = new bdsharkEntities())
            {
                var proveedorQuery = from proveedor in db.Proveedores where proveedor.RFC == param_proveedor.RFC select proveedor;
                foreach (var proveedor in proveedorQuery)
                {
                    result = true;
                    if (param_proveedor.calle == proveedor.calle && param_proveedor.colonia == proveedor.colonia)
                    {
                        opcion = "registrado";
                    }
                    else
                    {
                        opcion = "sucursal";
                    }
                }
                if (result == false)
                {
                    opcion = "unico";
                }
            }
            return opcion;
        }

        /// <summary>
        /// Modifica un objeto proveedor específico.
        /// </summary>
        /// <param name="proveedor">El objeto a modificar.</param>
        public void modificar(Proveedor proveedor)
        {

            using (bdsharkEntities db = new bdsharkEntities())
            {
                Proveedor n_proveedor = db.Proveedores.Find(proveedor.id);
                n_proveedor.calle = proveedor.calle;
                n_proveedor.codigo_postal = proveedor.codigo_postal;
                n_proveedor.colonia = proveedor.colonia;
                n_proveedor.empresa_id = proveedor.empresa_id;
                n_proveedor.estado = proveedor.estado;
                n_proveedor.localidad = proveedor.localidad;
                n_proveedor.municipio = proveedor.municipio;
                n_proveedor.NoExterior = proveedor.NoExterior;
                n_proveedor.nombre = proveedor.nombre;
                n_proveedor.pais = proveedor.pais;
                n_proveedor.razon_social = proveedor.razon_social;
                n_proveedor.RFC = proveedor.RFC;
                n_proveedor.sucursal = proveedor.sucursal;
                n_proveedor.telefono = proveedor.telefono;
                n_proveedor.tipos_proveedor = proveedor.tipos_proveedor;


                db.Proveedores.Attach(n_proveedor);
                db.Entry(n_proveedor).State = EntityState.Modified;
                db.SaveChanges();
            }
        }

    }
}
